REPORT zram_sales.
FUNCTION zfm_sales.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(SERDAT) TYPE  ZSTRT_ERDAT
*"     REFERENCE(SERNAM) TYPE  ZSTRT_ERNAM
*"  EXPORTING
*"     REFERENCE(IT_OUTPUT) TYPE  ZSTRT_OUTPUT
*"  EXCEPTIONS
*"      WRONG_INPUT
*"----------------------------------------------------------------------

TYPES: BEGIN OF lt_vbak,
  vbeln TYPE vbeln_va,
  END OF lt_vbak.

DATA : it_vbak TYPE STANDARD TABLE OF lt_vbak,
       wa_vbak TYPE lt_vbak.

TYPES : BEGIN OF lt_vbap,
  vbeln  TYPE vbeln_va,
  posnr  TYPE posnr_va,
  matnr  TYPE matnr,
  kwmeng TYPE kwmeng,
  vrkme  TYPE vrkme,
END OF lt_vbap.
DATA : it_vbap TYPE STANDARD TABLE OF lt_vbap,
       it_temp TYPE STANDARD TABLE OF lt_vbap,
       wa_vbap TYPE lt_vbap.
DATA : wa_output TYPE zstr_output.
DATA : lv_index TYPE i.

TYPES: BEGIN OF lt_makt,
  matnr TYPE matnr,
  spras TYPE spras,                       "language
  maktx TYPE maktx,
END OF lt_makt.

DATA : it_makt TYPE STANDARD TABLE OF lt_makt,
       wa_makt TYPE lt_makt.

 SELECT vbeln FROM vbak
 INTO TABLE it_vbak
 WHERE erdat IN serdat
 AND ernam IN sernam.

IF it_vbak IS NOT INITIAL.      "or sy-subrc = 0 also we can use
 SELECT vbeln posnr matnr kwmeng vrkme
 FROM vbap
 INTO TABLE it_vbap
 FOR ALL ENTRIES IN it_vbak
 WHERE vbeln = it_vbak-vbeln.
   ELSE.
     RAISE wrong_input.
ENDIF.

IF it_vbap IS NOT INITIAL.    "or sy-subrc = 0 also we can use
  it_temp = it_vbap.          " to improve perfomance delete the duplicates
  SORT it_temp BY matnr.
  DELETE ADJACENT DUPLICATES FROM it_temp COMPARING matnr.
  SELECT matnr spras maktx
  FROM makt
  INTO TABLE it_makt
  FOR ALL ENTRIES IN it_temp
  WHERE matnr = it_temp-matnr
    AND spras = sy-langu .             " if many language is there it will fecth only the system language datas
                                        " or only get datas in system language
ENDIF.

SORT  it_vbap BY vbeln.
SORT it_makt BY matnr.

LOOP AT it_vbak INTO wa_vbak.
    wa_output-vbeln = wa_vbak-vbeln.
READ TABLE it_vbap INTO wa_vbap WITH KEY vbeln = wa_vbak-vbeln BINARY SEARCH.
IF sy-subrc = 0.
  lv_index = sy-tabix.
ENDIF.
LOOP AT  it_vbap INTO wa_vbap FROM lv_index. "WHERE vbeln = wa_vbak-vbeln.
IF  wa_vbak-vbeln    = wa_vbap-vbeln.
    wa_output-posnr  = wa_vbap-posnr.
    wa_output-matnr  = wa_vbap-matnr.
    wa_output-kwmeng = wa_vbap-kwmeng.
    wa_output-vrkme  = wa_vbap-vrkme.
READ TABLE it_makt INTO wa_makt WITH KEY matnr = wa_vbap-matnr BINARY SEARCH.
 IF sy-subrc = 0.
    wa_output-maktx = wa_makt-maktx.
 ENDIF.

APPEND wa_output TO it_output.
CLEAR : wa_output.

ELSE.

  EXIT.

ENDIF.
ENDLOOP.
ENDLOOP.





ENDFUNCTION

INCLUDE zramdata_sales.     "data decalarations

INCLUDE zramsel_sales.       " selection screen

CALL FUNCTION 'ZFM_SALES'
  EXPORTING
    serdat            = s_erdat[]                   "if you not used [] sap think its work area of select option
    sernam            = s_ernam[]                  " bracket is must important.
 IMPORTING
   it_output         = it_output
 EXCEPTIONS
   wrong_input       = 1
   OTHERS            = 2
          .
IF sy-subrc <> 0.
MESSAGE i001(zmsg).
EXIT.
ENDIF.


" SUB ROUTINE TECHNIQUE FOR FIELD CATALOG FOR BETTER PERFORMANCE...............................................

PERFORM p_fcat USING '1' 'VBELN' text-002 CHANGING it_fcat.
PERFORM p_fcat USING '2' 'POSNR' text-003 CHANGING it_fcat.
PERFORM p_fcat USING '3' 'MATNR' text-004 CHANGING it_fcat.
PERFORM p_fcat USING '4' 'MAKTX' text-005 CHANGING it_fcat.
PERFORM p_fcat USING '5' 'KWMENG' text-006 CHANGING it_fcat.
PERFORM p_fcat USING '6' 'vRKME' text-007 CHANGING it_fcat.

"---------------------------------------------------------------------------------------------------------------

*NORMAL MANUAL  FIELDCATLOG METHOD

*wa_fcat-col_pos = '1'.
*wa_fcat-fieldname = 'VBELN'.
*wa_fcat-seltext_l = text-002.
*
*APPEND wa_fcat TO it_fcat.
*CLEAR wa_fcat.
*
*wa_fcat-col_pos = '2'.
*wa_fcat-fieldname = 'POSNR'.
*wa_fcat-seltext_l = text-003.
*
*APPEND wa_fcat TO it_fcat.
*CLEAR wa_fcat.
*
*wa_fcat-col_pos = '3'.
*wa_fcat-fieldname = 'MATNR'.
*wa_fcat-seltext_l = text-004.
*
*APPEND wa_fcat TO it_fcat.
*CLEAR wa_fcat.
*
*wa_fcat-col_pos = '4'.
*wa_fcat-fieldname = 'MAKTX'.
*wa_fcat-seltext_l = text-005.
*
*APPEND wa_fcat TO it_fcat.
*CLEAR wa_fcat.
*
*wa_fcat-col_pos = '5'.
*wa_fcat-fieldname = 'KWMENG'.
*wa_fcat-seltext_l = text-006.
*
*APPEND wa_fcat TO it_fcat.
*CLEAR wa_fcat.
*wa_fcat-col_pos = '9'.
*wa_fcat-fieldname = 'VRKME'.
*wa_fcat-seltext_l = text-007.
*
*APPEND wa_fcat TO it_fcat.
*CLEAR wa_fcat.

CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
 EXPORTING
*   I_INTERFACE_CHECK                 = ' '
*   I_BYPASSING_BUFFER                = ' '
*   I_BUFFER_ACTIVE                   = ' '
    i_callback_program                = sy-repid
    i_callback_pf_status_set          = 'PF_STATUS'
    i_callback_user_command           = 'U_COMM'
    i_callback_top_of_page            = 'TOP_OF_PAGE'
*   I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*   I_CALLBACK_HTML_END_OF_LIST       = ' '
*   I_STRUCTURE_NAME                  =
*   I_BACKGROUND_ID                   = ' '
*   I_GRID_TITLE                      =
*   I_GRID_SETTINGS                   =
   is_layout                         = it_layout
   it_fieldcat                       = it_fcat
*   IT_EXCLUDING                      =
*   IT_SPECIAL_GROUPS                 =
*   IT_SORT                           =
*   IT_FILTER                         =
*   IS_SEL_HIDE                       =
*   I_DEFAULT                         = 'X'
*   I_SAVE                            = ' '
*   IS_VARIANT                        =
*   IT_EVENTS                         =
*   IT_EVENT_EXIT                     =
*   IS_PRINT                          =
*   IS_REPREP_ID                      =
*   I_SCREEN_START_COLUMN             = 0
*   I_SCREEN_START_LINE               = 0
*   I_SCREEN_END_COLUMN               = 0
*   I_SCREEN_END_LINE                 = 0
*   I_HTML_HEIGHT_TOP                 = 0
*   I_HTML_HEIGHT_END                 = 0
*   IT_ALV_GRAPHICS                   =
*   IT_HYPERLINK                      =
*   IT_ADD_FIELDCAT                   =
*   IT_EXCEPT_QINFO                   =
*   IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*   E_EXIT_CAUSED_BY_CALLER           =
*   ES_EXIT_CAUSED_BY_USER            =
  TABLES
    t_outtab                          = it_output
 EXCEPTIONS
   program_error                     = 1
   OTHERS                            = 2
          .
IF sy-subrc <> 0.
* Implement suitable error handling here
ENDIF.

INCLUDE zram_sales_p_fcatf01.


FORM top_of_page.

wa_list-typ = 'H'.
wa_list-info = text-008.
APPEND wa_list TO it_list.
CLEAR wa_list.

IF s_erdat-low IS NOT INITIAL AND s_erdat-high IS INITIAL.

 CONCATENATE s_erdat-low+6(2) '.'  s_erdat-low+4(2) '.' s_erdat-low+0(4) INTO lv_low.

wa_list-typ = 'S'.
wa_list-key = text-009.
wa_list-info = lv_low.
APPEND wa_list TO it_list.
CLEAR wa_list..
ENDIF.

IF s_erdat-low IS NOT INITIAL AND s_erdat-high IS NOT INITIAL.

 CONCATENATE s_erdat-low+6(2) '.'  s_erdat-low+4(2) '.' s_erdat-low+0(4) INTO lv_low.
 CONCATENATE s_erdat-high+6(2) '.'  s_erdat-high+4(2) '.' s_erdat-high+0(4) INTO lv_high.   "string operation

 CONCATENATE lv_low  text-012 lv_high INTO lv_date SEPARATED BY space.

wa_list-typ = 'S'.
wa_list-key = text-009.
wa_list-info = lv_date.
APPEND wa_list TO it_list.
CLEAR wa_list.
ENDIF.

IF s_ernam IS NOT INITIAL.
wa_list-typ = 'S'.
wa_list-key = text-010.
wa_list-info = s_ernam-low .
APPEND wa_list TO it_list.
CLEAR wa_list.
ENDIF.

wa_list-typ = 'A'.
wa_list-info = text-011.
APPEND wa_list TO it_list.
CLEAR wa_list.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary       = it_list
*     I_LOGO                   =
*     I_END_OF_LIST_GRID       =
*     I_ALV_FORM               =
            .
 ENDFORM.


 FORM pf_status USING rt_extab TYPE slis_t_extab.
   SET PF-STATUS 'SALES'.
   ENDFORM.


FORM u_comm USING r_ucomm LIKE sy-ucomm
                                  rs_selfield TYPE slis_selfield.
IF r_ucomm = 'SMARTFORM'.

CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
  EXPORTING
    formname                 = 'ZRAM_SALES'
*   VARIANT                  = ' '
*   DIRECT_CALL              = ' '
IMPORTING
   fm_name                  = lv_fm_name
EXCEPTIONS
   no_form                  = 1
   no_function_module       = 2
   OTHERS                   = 3
          .
IF sy-subrc <> 0.
* Implement suitable error handling here
ENDIF.


lv_cp-no_dialog = 'X'.
lv_cp-preview = 'X'.
lv_op-tddest  = 'LP01'.


CALL FUNCTION lv_fm_name
  EXPORTING
*   ARCHIVE_INDEX              =
*   ARCHIVE_INDEX_TAB          =
*   ARCHIVE_PARAMETERS         =
    control_parameters         = lv_cp
*   MAIL_APPL_OBJ              =
*   MAIL_RECIPIENT             =
*   MAIL_SENDER                =
    output_options             = lv_op
    user_settings              = ' '
    perdat_low                 = s_erdat-low
    perdat_high                = s_erdat-high
    pernam                     = s_ernam-low
    it_output                  = it_output
* IMPORTING
*   DOCUMENT_OUTPUT_INFO       =
*   JOB_OUTPUT_INFO            =
*   JOB_OUTPUT_OPTIONS         =
 EXCEPTIONS
   formatting_error           = 1
   internal_error             = 2
   send_error                 = 3
   user_canceled              = 4
   OTHERS                     = 5
          .
IF sy-subrc <> 0.
* Implement suitable error handling here
ENDIF.

EXIT.

ENDIF.

IF r_ucomm = 'ADOBEFORM'.
exit.
ENDIF.
ENDFORM.
